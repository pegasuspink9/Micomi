generator client {
  provider = "prisma-client-js"
}

datasource d  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  admin_id   Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  created_at DateTime @default(now())

  @@index([email])
}

model Map {
  map_id           Int             @id @default(autoincrement())
  map_name         String          @unique
  description      String
  is_active        Boolean         @default(false)
  created_at       DateTime        @default(now())
  last_updated     DateTime?
  map_image        String
  difficulty_level DifficultyLevel
  levels           Level[]
}

model Lesson {
  lesson_id    Int    @id @default(autoincrement())
  level_id     Int
  lesson_title String
  description  String
  content      String
}

model Level {
  level_id         Int              @id @default(autoincrement())
  map_id           Int
  level_number     Int
  content          String
  points_reward    Int              @default(0)
  is_unlocked      Boolean          @default(false)
  feedback_message String
  level_difficulty DifficultyLevel
  level_type       String
  level_title      String?
  challenges       Challenge[]
  map              Map              @relation(fields: [map_id], references: [map_id], onDelete: Cascade)
  playerProgress   PlayerProgress[]
  quest            Quest[]
}

model Challenge {
  challenge_id   Int     @id @default(autoincrement())
  level_id       Int
  title          String
  description    String
  points_reward  Int     @default(0)
  coins_reward   Int     @default(0)
  hint           String
  challenge_type String
  guide          String?
  correct_answer Json    @default("[]")
  test_cases     Json?   @default("[]")
  options        Json?   @default("[]")
  question       String?
  level          Level   @relation(fields: [level_id], references: [level_id], onDelete: Cascade)
}

model Enemy {
  enemy_id          Int     @id @default(autoincrement())
  enemy_name        String
  enemy_description String
  enemy_difficulty  String
  enemy_avatar      String
  enemy_skills      String
  enemy_health      Int
  enemy_damage      Int
  enemy_map         String
  enemy_attack      String?
  enemy_coins       Int?    @default(0)
  enemy_dies        String?
  enemy_hurt        String?
  enemy_run         String?
}

model Player {
  player_id          Int                 @id @default(autoincrement())
  username           String              @unique
  email              String              @unique
  password           String
  total_points       Int                 @default(0)
  created_at         DateTime            @default(now())
  last_active        DateTime?
  days_logged_in     Int                 @default(0)
  coins              Int                 @default(100)
  exp_points         Int                 @default(0)
  level              Int                 @default(1)
  energy             Int                 @default(5)
  energy_reset_at    DateTime?
  playerAchievements PlayerAchievement[]
  ownedCharacters    PlayerCharacter[]
  ownedPotions       PlayerPotion[]
  playerProgress     PlayerProgress[]
  missions           Quest[]

  @@index([email])
  @@index([total_points])
}

model PlayerProgress {
  progress_id          Int           @id @default(autoincrement())
  player_id            Int
  level_id             Int
  current_level        Int
  is_completed         Boolean       @default(false)
  completed_at         DateTime?
  attempts             Int           @default(0)
  player_answer        Json          @default("[]")
  battle_status        BattleStatus? @default(in_progress)
  enemy_hp             Int?
  player_hp            Int?
  challenge_start_time DateTime?
  wrong_challenges     Json          @default("[]")
  has_freeze_effect    Boolean       @default(false)
  has_strong_effect    Boolean       @default(false)
  level                Level         @relation(fields: [level_id], references: [level_id], onDelete: Cascade)
  player               Player        @relation(fields: [player_id], references: [player_id], onDelete: Cascade)

  @@unique([player_id, level_id])
  @@index([player_id, level_id])
}

model Character {
  character_id      Int               @id @default(autoincrement())
  character_name    String
  avatar_image      String?
  character_type    String
  weapon_name       String
  weapon_skill      String
  health            Int
  is_purchased      Boolean           @default(false)
  is_selected       Boolean           @default(false)
  character_dies    String?
  character_hurt    String?
  user_coins        Int?              @default(0)
  character_damage  Json?             @default("[]")
  character_run     String?
  character_attacks Json?             @default("[]")
  characterShop     CharacterShop?
  playerCharacter   PlayerCharacter[]
}

model Achievement {
  achievement_id     Int                 @id @default(autoincrement())
  name               String
  description        String
  badge_icon         String
  points_required    Int                 @default(0)
  achievement_type   String
  playerAchievements PlayerAchievement[]
}

model PlayerAchievement {
  player_achievement_id Int         @id @default(autoincrement())
  player_id             Int
  achievement_id        Int
  earned_at             DateTime
  achievement           Achievement @relation(fields: [achievement_id], references: [achievement_id])
  player                Player      @relation(fields: [player_id], references: [player_id])

  @@unique([player_id, achievement_id])
}

model PotionShop {
  potion_shop_id     Int            @id @default(autoincrement())
  potion_type        PotionType     @unique
  potion_description String
  potion_price       Int
  potion_url         String?
  buyers             PlayerPotion[]
}

model PlayerPotion {
  player_potion_id Int        @id @default(autoincrement())
  player_id        Int
  potion_shop_id   Int
  quantity         Int        @default(0)
  player           Player     @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  potion           PotionShop @relation(fields: [potion_shop_id], references: [potion_shop_id], onDelete: Cascade)

  @@unique([player_id, potion_shop_id])
}

model CharacterShop {
  character_shop_id Int       @id @default(autoincrement())
  character_id      Int       @unique
  character_price   Int
  character         Character @relation(fields: [character_id], references: [character_id], onDelete: Cascade)
}

model PlayerCharacter {
  player_character_id Int       @id @default(autoincrement())
  player_id           Int
  character_id        Int
  is_purchased        Boolean   @default(false)
  is_selected         Boolean   @default(false)
  character           Character @relation(fields: [character_id], references: [character_id], onDelete: Cascade)
  player              Player    @relation(fields: [player_id], references: [player_id], onDelete: Cascade)

  @@unique([player_id, character_id])
}

model Quest {
  player_id      Int?
  level_id       Int?
  title          String
  description    String
  objective_type QuestType
  target_value   Int
  current_value  Int       @default(0)
  reward_exp     Int       @default(0)
  reward_coins   Int       @default(0)
  is_completed   Boolean   @default(false)
  assigned_at    DateTime?
  completed_at   DateTime?
  quest_id       Int       @id @default(autoincrement())
  created_at     DateTime  @default(now())
  is_template    Boolean   @default(false)
  level          Level?    @relation(fields: [level_id], references: [level_id])
  player         Player?   @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
}

enum QuestType {
  defeat_enemy
  buy_potion
  unlock_character
  complete_lesson
  solve_challenge
  spend_coins
  earn_exp
  login_days
}

enum PotionType {
  health
  strong
  freeze
  hint
}

enum DifficultyLevel {
  easy
  medium
  hard
  expert
  final
}

enum BattleStatus {
  in_progress
  won
  lost
}
rogress
  won
  lost
}



enge
  spend_coins
  earn_exp //not yet implemented (needs clarification)
  login_days
}

enum PotionType {
  health
  strong
  freeze
  hint
}

enum DifficultyLevel {
  easy
  medium
  hard
  expert
  final
}

enum BattleStatus {
  in_progress
  won
  lost
}



