generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Admin {
  admin_id    Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  created_at  DateTime @default(now())

  @@index([email])
}

model Map {
  map_id         Int            @id @default(autoincrement())
  map_name       String         @unique
  description    String
  difficulty_level DifficultyLevel
  map_image      String         @db.Text
  is_active      Boolean        @default(false)
  created_at     DateTime       @default(now())
  last_updated   DateTime?
  levels         Level[]
}

model Lesson {
  lesson_id     Int       @id @default(autoincrement())
  level_id      Int
  lesson_title  String
  description   String 
  content       String    @db.Text
} //Para sa Practice

model Level {
  level_id          Int      @id @default(autoincrement())
  map_id            Int
  level_number      Int
  level_type        String 
  level_difficulty  DifficultyLevel
  level_title       String?
  content           String   @db.Text
  is_unlocked       Boolean  @default(false)
  feedback_message  String  @db.Text
  map               Map      @relation(fields: [map_id], references: [map_id], onDelete: Cascade)
  challenges        Challenge[] 
  playerProgress    PlayerProgress[]
  quest             Quest[]
  potionShopByLevel PotionShopByLevel[]
  potionsBoughtByLevel    PlayerLevelPotion[]
}

model Challenge {
  challenge_id   Int     @id @default(autoincrement())
  level_id       Int
  challenge_type String     //Easy: multiple choice and fill in the blank. Medium: code with guide. Hard: freeform coding
  title          String
  description    String  @db.Text
  question       String?
  correct_answer Json    @default("[]")
  hint           String  @db.Text
  points_reward  Int     @default(0)      
  coins_reward   Int     @default(0)  

  guide           String?
  test_cases      Json?    @default("[]")
  options         Json?    @default("[]")
  expected_output Json?    @default("[]")

  level          Level    @relation(fields: [level_id], references: [level_id], onDelete: Cascade)
}

model Enemy {
  enemy_id          Int     @id @default(autoincrement())
  enemy_name        String
  enemy_description String
  enemy_difficulty  String
  enemy_map         String   //to determine what map is this enemy (HTML, CSS, JavaScript, Computer)
  enemy_skills      String
  enemy_health      Int     
  enemy_damage      Int

  //animations
  enemy_avatar      String   @db.Text //idle animation
  enemy_attack      String?  @db.Text 
  enemy_dies        String?  @db.Text 
  enemy_run         String?  @db.Text
  enemy_hurt        String?  @db.Text

  enemy_coins       Int?     @default(0)
}

model Player {
  player_id            Int      @id @default(autoincrement())
  username             String   @unique
  email                String   @unique
  password             String
  total_points         Int      @default(0)  //point given after completing the level (sum of all points per challenge (only the first won))
  exp_points           Int      @default(0)  //point given after completing the level plus the exp points from quest
  level                Int      @default(1)   
  created_at           DateTime @default(now())
  last_active          DateTime?
  days_logged_in       Int      @default(0)
  coins                Int      @default(100)

  energy           Int      @default(25)
  energy_reset_at  DateTime?

  playerProgress       PlayerProgress[]
  playerAchievements   PlayerAchievement[]
  missions             Quest[]

  ownedCharacters      PlayerCharacter[]
  ownedPotions         PlayerPotion[]
  ownedLevelPotions    PlayerLevelPotion[]

  @@index([email])
  @@index([total_points])
}

model PlayerProgress {
  progress_id    Int      @id @default(autoincrement())
  player_id      Int
  level_id       Int

  player_answer  Json     @default("[]")
  wrong_challenges Json   @default("[]")

  current_level  Int
  attempts       Int      @default(0)
  
  is_completed   Boolean  @default(false)
  completed_at   DateTime?
  challenge_start_time  DateTime?

  enemy_hp       Int?     
  player_hp      Int?     
  battle_status  BattleStatus? @default(in_progress)

  //active potion effects during combat
  has_strong_effect  Boolean @default(false)
  has_freeze_effect  Boolean @default(false)

  //track kuwens during combat
  coins_earned         Int      @default(0)

  player         Player   @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  level          Level    @relation(fields: [level_id], references: [level_id], onDelete: Cascade)

  @@unique([player_id, level_id])
  @@index([player_id, level_id])
}

model Character {
  character_id      Int      @id @default(autoincrement())
  character_name    String
  character_type    String  
  health            Int      
  weapon_name       String
  weapon_skill      String
  character_damage  Json?    @default("[]") //10, 20, 30  
  is_purchased      Boolean  @default(false)
  is_selected       Boolean  @default(false)

  //animations
  avatar_image      String?   @db.Text //idle image
  character_run     String?   @db.Text
  character_hurt    String?   @db.Text
  character_dies    String?   @db.Text

  user_coins        Int?      @default(0)

  character_attacks Json?   @default("[]") //["basic_attack", "second_attack", "special_attack"] animation links

  playerCharacter     PlayerCharacter[]
  characterShop       CharacterShop[]
}

model Achievement {
  achievement_id    Int      @id @default(autoincrement())
  achievement_name              String
  description       String
  badge_icon        String?   @db.Text
  conditions        String
  playerAchievements PlayerAchievement[]
}

model PlayerAchievement {
  player_achievement_id Int      @id @default(autoincrement())
  player_id             Int
  achievement_id        Int
  earned_at             DateTime
  player                Player    @relation(fields: [player_id], references: [player_id])
  achievement           Achievement @relation(fields: [achievement_id], references: [achievement_id])

  @@unique([player_id, achievement_id])
}

model PotionShop {
  potion_shop_id      Int        @id @default(autoincrement())
  potion_type         PotionType @unique 
  potion_description  String 
  potion_price        Int
  potion_url          String?     @db.Text

  buyers              PlayerPotion[]
  levelBuyers         PlayerLevelPotion[]
}

model PlayerLevelPotion {
  player_level_potion_id Int      @id @default(autoincrement())
  player_id              Int
  level_id               Int
  potion_shop_id         Int
  quantity               Int      @default(0)
  created_at             DateTime @default(now())

  player                 Player     @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  level                  Level      @relation(fields: [level_id], references: [level_id], onDelete: Cascade)
  potion                 PotionShop @relation(fields: [potion_shop_id], references: [potion_shop_id], onDelete: Cascade)

  @@unique([player_id, level_id, potion_shop_id])
}

model PotionShopByLevel {
  potion_shop_by_level_id Int   @id @default(autoincrement())
  level_id                Int
  potions_avail           Json   @default("[]") //["health","strong", "freeze", "hint"]

  health_quantity         Int    @default(0)
  strong_quantity         Int    @default(0)
  freeze_quantity         Int    @default(0)
  hint_quantity           Int    @default(0)

  level                   Level  @relation(fields: [level_id], references: [level_id], onDelete: Cascade)

  @@unique([level_id]) 
}

model PlayerPotion {
  player_potion_id    Int        @id @default(autoincrement())
  player_id           Int
  potion_shop_id      Int
  quantity            Int        @default(0)

  player              Player     @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  potion              PotionShop @relation(fields: [potion_shop_id], references: [potion_shop_id], onDelete: Cascade)

  @@unique([player_id, potion_shop_id])
}

model CharacterShop {
  character_shop_id   Int       @id @default(autoincrement())
  character_id        Int       @unique 
  character_price     Int

  character           Character @relation(fields: [character_id], references: [character_id], onDelete: Cascade)
}

model PlayerCharacter {
  player_character_id Int      @id @default(autoincrement())
  player_id           Int
  character_id        Int
  is_purchased        Boolean  @default(false)
  is_selected         Boolean  @default(false)

  player              Player    @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  character           Character @relation(fields: [character_id], references: [character_id], onDelete: Cascade)

  @@unique([player_id, character_id])
}

model Quest {
  quest_id Int      @id @default(autoincrement())
  player_id         Int?
  level_id          Int?
  title             String
  description       String   @db.Text
  objective_type    QuestType
  target_value      Int
  current_value     Int      @default(0)
  reward_exp        Int      @default(0)
  reward_coins      Int      @default(0)
  is_completed      Boolean  @default(false)
  is_template       Boolean    @default(false)
  assigned_at       DateTime?
  completed_at      DateTime?
  created_at        DateTime @default(now())
  player            Player?   @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  level             Level?   @relation(fields: [level_id], references: [level_id], onDelete: SetNull)
}

enum QuestType {
  defeat_enemy
  buy_potion
  unlock_character
  complete_lesson //not yet implemented
  solve_challenge
  spend_coins
  earn_exp //not yet implemented (needs clarification)
  login_days
}

enum PotionType {
  health
  strong
  freeze
  hint
}

enum DifficultyLevel {
  easy
  medium
  hard
  expert
  final
}

enum BattleStatus {
  in_progress
  won
  lost
}



